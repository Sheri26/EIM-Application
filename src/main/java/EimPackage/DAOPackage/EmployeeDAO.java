/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package EimPackage.DAOPackage;


import java.awt.Component;
import java.sql.*;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
// Remove email input
public class EmployeeDAO implements Database {

    private String emIDNumber, emName, emSurname, emTitle, emContactN;
    private char emGender;
    private int emRole;
    Connection con;

    public EmployeeDAO() {
    }

    public EmployeeDAO(String emIDNumber, String emName, String emSurname, int emRole, String emTitle, String emContactN, char emGender) {
        this.emIDNumber = emIDNumber;
        this.emName = emName;
        this.emSurname = emSurname;
        this.emRole = emRole;
        this.emTitle = emTitle;
        this.emContactN = emContactN;
        this.emGender = emGender;
    }

    public String getEmIDNumber() {
        return emIDNumber;
    }

    public void setEmIDNumber(String emIDNumber) {
        this.emIDNumber = emIDNumber;
    }

    public String getEmName() {
        return emName;
    }

    public void setEmName(String emName) {
        this.emName = emName;
    }

    public String getEmSurname() {
        return emSurname;
    }

    public void setEmSurname(String emSurname) {
        this.emSurname = emSurname;
    }

    public int getEmRole() {
        return emRole;
    }

    public void setEmRole(int emRole) {
        this.emRole = emRole;
    }

    public String getEmTitle() {
        return emTitle;
    }

    public void setEmTitle(String emTitle) {
        this.emTitle = emTitle;
    }

    public String getEmContactN() {
        return emContactN;
    }

    public void setEmContactN(String emContactN) {
        this.emContactN = emContactN;
    }

    @Override
    public Connection createConnection() {
        String url = "jdbc:mysql://localhost:3306/razels_schema";
        String dbUsername = "root";
        String dbPassword = "root";

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection(url, dbUsername, dbPassword);
            return con;

        } catch (Exception ex) {
            System.out.println(ex);
        }

        return null;
    }

    //## Add input for emp_title, emp_ContactN, emp_Email
    public void registerEmployee(Component pComp) {

        String[] userData = searchEmployee(emIDNumber);
        StringBuilder messg = new StringBuilder();

        if (userData[0] != null) {
            int empNo = Integer.parseInt(userData[3]); 
            String[] credentials = new CredentialsDAO().getCredentials(empNo);
            messg.append("ID Number Already Registered As :\n");
            messg.append("\nID Number : ");
            messg.append(userData[0]);
            messg.append("\n");
            messg.append("Name : ");
            messg.append(userData[1]);
            messg.append("\n");
            messg.append("Surname : ");
            messg.append(userData[2]);
            messg.append("\n");
            messg.append("Username : ");
            messg.append(credentials[0]);
            messg.append("\n");
            messg.trimToSize();
            messg.toString();
            JOptionPane.showMessageDialog(pComp, messg, "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        } else {
            con = createConnection();
            try {
                PreparedStatement st = con.prepareStatement("INSERT INTO employee(Name,Surname,IdNo,Title,Contact,fkRoleNo) VALUES (?,?,?,?,?,?)");
                st.setString(1, emName);
                st.setString(2, emSurname);
                st.setString(3, emIDNumber);
                st.setString(4, emTitle);
                st.setString(5, emContactN);
                st.setInt(6, emRole);
                //st.setString(5,emUsername);
                st.executeUpdate();
                st.close();
                con.close();

               
            } catch (Exception ex) {
                System.out.println(ex);
            }
            //searching for new employee details in database to retrieve registered employee username generated by mysql trigger, the same goes for the password 
            String userD[] = searchEmployee(emIDNumber);
            int empNo = Integer.parseInt(userD[3]); 
            String[] credentials = new CredentialsDAO().getCredentials(empNo);
            String results = "Username : " + credentials[0] + "\n" + "Password : " + credentials[1];
            JOptionPane.showMessageDialog(pComp, results, "NEW CREDENTIALS", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    public void removeEmployee(String idNumber, Component pComp) {
        // using search employee function to find employees details for correct removal and to verify the specific user/employee exist in the database 
        String rst[] = searchEmployee(idNumber);
        if (rst[0] == null) {
            JOptionPane.showMessageDialog(pComp, "Invalid Details", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (rst[0].equals(idNumber)) {
            try {
                con = createConnection();

                PreparedStatement st = con.prepareStatement("DELETE FROM employee WHERE IdNo = ?");
                st.setString(1, idNumber);
                String delUser = rst[5];
                StringBuilder confMessage = new StringBuilder();
                confMessage.append("Are you sure you want to remove:\n ");
                confMessage.append("Username:");
                confMessage.append("\t");
                confMessage.append(delUser);
                int response = JOptionPane.showConfirmDialog(pComp, confMessage, "CONFIRM USER REMOVAL", JOptionPane.YES_NO_OPTION);
                if (response == JOptionPane.YES_OPTION) {
                    int results = st.executeUpdate();
                    JOptionPane.showMessageDialog(pComp, results + " user removed", "REMOVE ACCESS", JOptionPane.INFORMATION_MESSAGE);
                }

                st.close();
                con.close();
            } catch (Exception ex) {
                System.out.println(ex);
            }

        } else {
            JOptionPane.showMessageDialog(pComp, "Invalid Details", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    public String[] searchEmployee(String idNumber) {
        String eIdNumber = null, eName = null, eSurname = null, eUsername = null;
        char eGender = 0;
        int eNo = 0;
        String[] row = null;
        try {
            con = createConnection();
            PreparedStatement st = con.prepareStatement("SELECT * FROM employee WHERE IdNo = ?");
            st.setString(1, idNumber);
            ResultSet rs = st.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            row = new String[rsmd.getColumnCount()+ 1];

            while (rs.next()) {
                eNo = rs.getInt("eNo");
                eIdNumber = rs.getString("IdNo");
                eName = rs.getString("Name");
                eSurname = rs.getString("Surname");
                eGender = rs.getString("Gender").charAt(0);
            }
            
            PreparedStatement pst = con.prepareStatement("SELECT * FROM credentials WHERE fk_Emp_No = ?");
            pst.setInt(1, eNo);
            ResultSet rst = pst.executeQuery();
           
            while (rst.next()){
                eUsername = rst.getString("username");
            }
            
           
            
            
            st.close();
            con.close();

        } catch (Exception ex) {
            System.out.println(ex);
        }

        row[0] = eIdNumber;

        row[1] = eName;

        row[2] = eSurname;

        row[3] = Integer.toString(eNo);
        
        row[4] = Character.toString(eGender);
        
        row[5] = eUsername;
        
        return row;
    }

    //Use auth function on sign in for faster sign-in
    //MySql indexes on IdNumber and Username Columns as well to speed up queries 
    //## Use security (credentials) table and index for faster search and no index on employee table results in faster insertion 
    public Boolean authEmployee(String idNumber, String username) {
        Boolean bAuth = false, hasResult = false;

        //Search for employee in database to find relevant employee details
        String rslt[] = searchEmployee(idNumber);
        String recEmpNo = rslt[3];
        int empNo = Integer.parseInt(recEmpNo);
        if (empNo <= 0){
            return bAuth;
        }
        
        else{
            bAuth = true;
            return bAuth;
        }
            /**con = createConnection();
            try {
                //The reason for selecting username and fk_Emp_No together because thats the tables composite key (MySQL)
                PreparedStatement pst = con.prepareStatement("SELECT * FROM credentials WHERE username = ? AND fk_Emp_No = ? ");
                pst.setString(1, username);
                pst.setInt(2, empNo);
                //hasResult = pst.execute();
                ResultSet rstSet = pst.executeQuery();
            } catch (Exception ex) {
                System.out.println(ex);
            }
        }**/
        
        //String recUsername;

        /**
         * if ((idNumber.equals(recIdNumber)) &&
         * (username.equals(recUsername))){ bAuth = true; } else{ bAuth = false;
         * }
         *
         * if (hasResult) bAuth = true; else bAuth = false;*
         */
        //bAuth = hasResult;
        //return bAuth;
    }

    //## Add username update to credentials table
    //## Add credentials table update
    //## Make trigger to generate new username after update on employees table name or surname 
    //Remove update employee username option bcoz username dont change in credentials table when name or surname updated in employee
    //Employee must be removed and added again if details changes.
    //OR make way for credentials details to be updated and deleted together with employee table 
    //OR add credentials to employee table
    public int updateEmployee(String nName, String nSurname, String nUsername, String nGender, String idNumber) {
        
        String[] empDetails;
        int result = 0, empNo = 0;
        try {
            
            //function that uses employee ID Number to retrieve employee relevant details before update
            empDetails = searchEmployee(idNumber);
            
            //sql statement that updates provided details by employee
            con = createConnection();
            PreparedStatement st = con.prepareStatement("UPDATE employee e INNER JOIN credentials c ON e.eNo = c.fk_Emp_No SET e.Name = ?,e.Surname = ?,e.Gender = ?, c.username = ? WHERE e.IdNo = ?");
            st.setString(1, nName);
            st.setString(2, nSurname);
            st.setString(3, nGender);
            st.setString(4, nUsername);
            st.setString(5, idNumber);
            result = st.executeUpdate();
            st.close();
            con.close();
        } catch (Exception ex) {
            System.out.println(ex);
        }
        return result;
    }

}
